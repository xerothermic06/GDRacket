#lang racket
(begin
  (require "./gd-object-base.rkt"))
(begin
  (provide Node)
  (define Node
    (class Object
      (super-new)
      (define/final (get-editor-description) (gdobject-get (quote editor_description)))
      (define/final (set!-editor-description valu) (gdobject-set (quote editor_description) valu))
      (define/final (get-process-thread-messages) (gdobject-get (quote process_thread_messages)))
      (define/final (set!-process-thread-messages valu)
                    (gdobject-set (quote process_thread_messages) valu))
      (define/final (get-process-thread-group-order)
                    (gdobject-get (quote process_thread_group_order)))
      (define/final (set!-process-thread-group-order valu)
                    (gdobject-set (quote process_thread_group_order) valu))
      (define/final (get-process-thread-group) (gdobject-get (quote process_thread_group)))
      (define/final (set!-process-thread-group valu) (gdobject-set (quote process_thread_group) valu))
      (define/final (get-process-physics-priority) (gdobject-get (quote process_physics_priority)))
      (define/final (set!-process-physics-priority valu)
                    (gdobject-set (quote process_physics_priority) valu))
      (define/final (get-process-priority) (gdobject-get (quote process_priority)))
      (define/final (set!-process-priority valu) (gdobject-set (quote process_priority) valu))
      (define/final (get-process-mode) (gdobject-get (quote process_mode)))
      (define/final (set!-process-mode valu) (gdobject-set (quote process_mode) valu))
      (define/final (get-multiplayer) (gdobject-get (quote multiplayer)))
      (define/final (set!-multiplayer valu) (gdobject-set (quote multiplayer) valu))
      (define/final (get-owner) (gdobject-get (quote owner)))
      (define/final (set!-owner valu) (gdobject-set (quote owner) valu))
      (define/final (get-scene-file-path) (gdobject-get (quote scene_file_path)))
      (define/final (set!-scene-file-path valu) (gdobject-set (quote scene_file_path) valu))
      (define/final (get-unique-name-in-owner) (gdobject-get (quote unique_name_in_owner)))
      (define/final (set!-unique-name-in-owner valu) (gdobject-set (quote unique_name_in_owner) valu))
      (define/final (get-name) (gdobject-get (quote name)))
      (define/final (set!-name valu) (gdobject-set (quote name) valu))
      (define/public (-process delta) (gdobject-invoke (quote _process) delta))
      (define/public (-physics-process delta) (gdobject-invoke (quote _physics_process) delta))
      (define/public (-enter-tree) (gdobject-invoke (quote _enter_tree)))
      (define/public (-exit-tree) (gdobject-invoke (quote _exit_tree)))
      (define/public (-ready) (gdobject-invoke (quote _ready)))
      (define/public (-get-configuration-warnings)
        (gdobject-invoke (quote _get_configuration_warnings)))
      (define/public (-input event) (gdobject-invoke (quote _input) event))
      (define/public (-shortcut-input event) (gdobject-invoke (quote _shortcut_input) event))
      (define/public (-unhandled-input event) (gdobject-invoke (quote _unhandled_input) event))
      (define/public (-unhandled-key-input event)
        (gdobject-invoke (quote _unhandled_key_input) event))
      (define/public (print-orphan-nodes) (gdobject-invoke (quote print_orphan_nodes)))
      (define/public (add-sibling sibling force_readable_name)
        (gdobject-invoke (quote add_sibling) sibling force_readable_name))
      (define/public (set-name name) (gdobject-invoke (quote set_name) name))
      (define/public (get-name) (gdobject-invoke (quote get_name)))
      (define/public (add-child node force_readable_name internal)
        (gdobject-invoke (quote add_child) node force_readable_name internal))
      (define/public (remove-child node) (gdobject-invoke (quote remove_child) node))
      (define/public (reparent new_parent keep_global_transform)
        (gdobject-invoke (quote reparent) new_parent keep_global_transform))
      (define/public (get-child-count include_internal)
        (gdobject-invoke (quote get_child_count) include_internal))
      (define/public (get-children include_internal)
        (gdobject-invoke (quote get_children) include_internal))
      (define/public (get-child idx include_internal)
        (gdobject-invoke (quote get_child) idx include_internal))
      (define/public (has-node path) (gdobject-invoke (quote has_node) path))
      (define/public (get-node path) (gdobject-invoke (quote get_node) path))
      (define/public (get-node-or-null path) (gdobject-invoke (quote get_node_or_null) path))
      (define/public (get-parent) (gdobject-invoke (quote get_parent)))
      (define/public (find-child pattern recursive owned)
        (gdobject-invoke (quote find_child) pattern recursive owned))
      (define/public (find-children pattern type recursive owned)
        (gdobject-invoke (quote find_children) pattern type recursive owned))
      (define/public (find-parent pattern) (gdobject-invoke (quote find_parent) pattern))
      (define/public (has-node-and-resource path)
        (gdobject-invoke (quote has_node_and_resource) path))
      (define/public (get-node-and-resource path)
        (gdobject-invoke (quote get_node_and_resource) path))
      (define/public (is-inside-tree) (gdobject-invoke (quote is_inside_tree)))
      (define/public (is-ancestor-of node) (gdobject-invoke (quote is_ancestor_of) node))
      (define/public (is-greater-than node) (gdobject-invoke (quote is_greater_than) node))
      (define/public (get-path) (gdobject-invoke (quote get_path)))
      (define/public (get-path-to node use_unique_path)
        (gdobject-invoke (quote get_path_to) node use_unique_path))
      (define/public (add-to-group group persistent)
        (gdobject-invoke (quote add_to_group) group persistent))
      (define/public (remove-from-group group) (gdobject-invoke (quote remove_from_group) group))
      (define/public (is-in-group group) (gdobject-invoke (quote is_in_group) group))
      (define/public (move-child child_node to_index)
        (gdobject-invoke (quote move_child) child_node to_index))
      (define/public (get-groups) (gdobject-invoke (quote get_groups)))
      (define/public (set-owner owner) (gdobject-invoke (quote set_owner) owner))
      (define/public (get-owner) (gdobject-invoke (quote get_owner)))
      (define/public (get-index include_internal)
        (gdobject-invoke (quote get_index) include_internal))
      (define/public (print-tree) (gdobject-invoke (quote print_tree)))
      (define/public (print-tree-pretty) (gdobject-invoke (quote print_tree_pretty)))
      (define/public (get-tree-string) (gdobject-invoke (quote get_tree_string)))
      (define/public (get-tree-string-pretty) (gdobject-invoke (quote get_tree_string_pretty)))
      (define/public (set-scene-file-path scene_file_path)
        (gdobject-invoke (quote set_scene_file_path) scene_file_path))
      (define/public (get-scene-file-path) (gdobject-invoke (quote get_scene_file_path)))
      (define/public (propagate-notification what)
        (gdobject-invoke (quote propagate_notification) what))
      (define/public (propagate-call method args parent_first)
        (gdobject-invoke (quote propagate_call) method args parent_first))
      (define/public (set-physics-process enable)
        (gdobject-invoke (quote set_physics_process) enable))
      (define/public (get-physics-process-delta-time)
        (gdobject-invoke (quote get_physics_process_delta_time)))
      (define/public (is-physics-processing) (gdobject-invoke (quote is_physics_processing)))
      (define/public (get-process-delta-time) (gdobject-invoke (quote get_process_delta_time)))
      (define/public (set-process enable) (gdobject-invoke (quote set_process) enable))
      (define/public (set-process-priority priority)
        (gdobject-invoke (quote set_process_priority) priority))
      (define/public (get-process-priority) (gdobject-invoke (quote get_process_priority)))
      (define/public (set-physics-process-priority priority)
        (gdobject-invoke (quote set_physics_process_priority) priority))
      (define/public (get-physics-process-priority)
        (gdobject-invoke (quote get_physics_process_priority)))
      (define/public (is-processing) (gdobject-invoke (quote is_processing)))
      (define/public (set-process-input enable) (gdobject-invoke (quote set_process_input) enable))
      (define/public (is-processing-input) (gdobject-invoke (quote is_processing_input)))
      (define/public (set-process-shortcut-input enable)
        (gdobject-invoke (quote set_process_shortcut_input) enable))
      (define/public (is-processing-shortcut-input)
        (gdobject-invoke (quote is_processing_shortcut_input)))
      (define/public (set-process-unhandled-input enable)
        (gdobject-invoke (quote set_process_unhandled_input) enable))
      (define/public (is-processing-unhandled-input)
        (gdobject-invoke (quote is_processing_unhandled_input)))
      (define/public (set-process-unhandled-key-input enable)
        (gdobject-invoke (quote set_process_unhandled_key_input) enable))
      (define/public (is-processing-unhandled-key-input)
        (gdobject-invoke (quote is_processing_unhandled_key_input)))
      (define/public (set-process-mode mode) (gdobject-invoke (quote set_process_mode) mode))
      (define/public (get-process-mode) (gdobject-invoke (quote get_process_mode)))
      (define/public (can-process) (gdobject-invoke (quote can_process)))
      (define/public (set-process-thread-group mode)
        (gdobject-invoke (quote set_process_thread_group) mode))
      (define/public (get-process-thread-group) (gdobject-invoke (quote get_process_thread_group)))
      (define/public (set-process-thread-messages flags)
        (gdobject-invoke (quote set_process_thread_messages) flags))
      (define/public (get-process-thread-messages)
        (gdobject-invoke (quote get_process_thread_messages)))
      (define/public (set-process-thread-group-order order)
        (gdobject-invoke (quote set_process_thread_group_order) order))
      (define/public (get-process-thread-group-order)
        (gdobject-invoke (quote get_process_thread_group_order)))
      (define/public (set-display-folded fold) (gdobject-invoke (quote set_display_folded) fold))
      (define/public (is-displayed-folded) (gdobject-invoke (quote is_displayed_folded)))
      (define/public (set-process-internal enable)
        (gdobject-invoke (quote set_process_internal) enable))
      (define/public (is-processing-internal) (gdobject-invoke (quote is_processing_internal)))
      (define/public (set-physics-process-internal enable)
        (gdobject-invoke (quote set_physics_process_internal) enable))
      (define/public (is-physics-processing-internal)
        (gdobject-invoke (quote is_physics_processing_internal)))
      (define/public (get-window) (gdobject-invoke (quote get_window)))
      (define/public (get-last-exclusive-window) (gdobject-invoke (quote get_last_exclusive_window)))
      (define/public (get-tree) (gdobject-invoke (quote get_tree)))
      (define/public (create-tween) (gdobject-invoke (quote create_tween)))
      (define/public (duplicate flags) (gdobject-invoke (quote duplicate) flags))
      (define/public (replace-by node keep_groups)
        (gdobject-invoke (quote replace_by) node keep_groups))
      (define/public (set-scene-instance-load-placeholder load_placeholder)
        (gdobject-invoke (quote set_scene_instance_load_placeholder) load_placeholder))
      (define/public (get-scene-instance-load-placeholder)
        (gdobject-invoke (quote get_scene_instance_load_placeholder)))
      (define/public (set-editable-instance node is_editable)
        (gdobject-invoke (quote set_editable_instance) node is_editable))
      (define/public (is-editable-instance node) (gdobject-invoke (quote is_editable_instance) node))
      (define/public (get-viewport) (gdobject-invoke (quote get_viewport)))
      (define/public (queue-free) (gdobject-invoke (quote queue_free)))
      (define/public (request-ready) (gdobject-invoke (quote request_ready)))
      (define/public (is-node-ready) (gdobject-invoke (quote is_node_ready)))
      (define/public (set-multiplayer-authority id recursive)
        (gdobject-invoke (quote set_multiplayer_authority) id recursive))
      (define/public (get-multiplayer-authority) (gdobject-invoke (quote get_multiplayer_authority)))
      (define/public (is-multiplayer-authority) (gdobject-invoke (quote is_multiplayer_authority)))
      (define/public (get-multiplayer) (gdobject-invoke (quote get_multiplayer)))
      (define/public (rpc-config method config) (gdobject-invoke (quote rpc_config) method config))
      (define/public (set-editor-description editor_description)
        (gdobject-invoke (quote set_editor_description) editor_description))
      (define/public (get-editor-description) (gdobject-invoke (quote get_editor_description)))
      (define/public (set-unique-name-in-owner enable)
        (gdobject-invoke (quote set_unique_name_in_owner) enable))
      (define/public (is-unique-name-in-owner) (gdobject-invoke (quote is_unique_name_in_owner)))
      (define/public (rpc method) (gdobject-invoke (quote rpc) method))
      (define/public (rpc-id peer_id method) (gdobject-invoke (quote rpc_id) peer_id method))
      (define/public (update-configuration-warnings)
        (gdobject-invoke (quote update_configuration_warnings)))
      (define/public (call-deferred-thread-group method)
        (gdobject-invoke (quote call_deferred_thread_group) method))
      (define/public (set-deferred-thread-group property value)
        (gdobject-invoke (quote set_deferred_thread_group) property value))
      (define/public (notify-deferred-thread-group what)
        (gdobject-invoke (quote notify_deferred_thread_group) what))
      (define/public (call-thread-safe method) (gdobject-invoke (quote call_thread_safe) method))
      (define/public (set-thread-safe property value)
        (gdobject-invoke (quote set_thread_safe) property value))
      (define/public (notify-thread-safe what) (gdobject-invoke (quote notify_thread_safe) what))))
  (provide Node:ProcessMode:PROCESS_MODE_DISABLED)
  (define-syntax (Node:ProcessMode:PROCESS_MODE_DISABLED stx) (syntax 4))
  (provide Node:ProcessMode:PROCESS_MODE_ALWAYS)
  (define-syntax (Node:ProcessMode:PROCESS_MODE_ALWAYS stx) (syntax 3))
  (provide Node:ProcessMode:PROCESS_MODE_WHEN_PAUSED)
  (define-syntax (Node:ProcessMode:PROCESS_MODE_WHEN_PAUSED stx) (syntax 2))
  (provide Node:ProcessMode:PROCESS_MODE_PAUSABLE)
  (define-syntax (Node:ProcessMode:PROCESS_MODE_PAUSABLE stx) (syntax 1))
  (provide Node:ProcessMode:PROCESS_MODE_INHERIT)
  (define-syntax (Node:ProcessMode:PROCESS_MODE_INHERIT stx) (syntax 0))
  (provide Node:ProcessThreadGroup:PROCESS_THREAD_GROUP_SUB_THREAD)
  (define-syntax (Node:ProcessThreadGroup:PROCESS_THREAD_GROUP_SUB_THREAD stx) (syntax 2))
  (provide Node:ProcessThreadGroup:PROCESS_THREAD_GROUP_MAIN_THREAD)
  (define-syntax (Node:ProcessThreadGroup:PROCESS_THREAD_GROUP_MAIN_THREAD stx) (syntax 1))
  (provide Node:ProcessThreadGroup:PROCESS_THREAD_GROUP_INHERIT)
  (define-syntax (Node:ProcessThreadGroup:PROCESS_THREAD_GROUP_INHERIT stx) (syntax 0))
  (provide Node:ProcessThreadMessages:FLAG_PROCESS_THREAD_MESSAGES_ALL)
  (define-syntax (Node:ProcessThreadMessages:FLAG_PROCESS_THREAD_MESSAGES_ALL stx) (syntax 3))
  (provide Node:ProcessThreadMessages:FLAG_PROCESS_THREAD_MESSAGES_PHYSICS)
  (define-syntax (Node:ProcessThreadMessages:FLAG_PROCESS_THREAD_MESSAGES_PHYSICS stx) (syntax 2))
  (provide Node:ProcessThreadMessages:FLAG_PROCESS_THREAD_MESSAGES)
  (define-syntax (Node:ProcessThreadMessages:FLAG_PROCESS_THREAD_MESSAGES stx) (syntax 1))
  (provide Node:DuplicateFlags:DUPLICATE_USE_INSTANTIATION)
  (define-syntax (Node:DuplicateFlags:DUPLICATE_USE_INSTANTIATION stx) (syntax 8))
  (provide Node:DuplicateFlags:DUPLICATE_SCRIPTS)
  (define-syntax (Node:DuplicateFlags:DUPLICATE_SCRIPTS stx) (syntax 4))
  (provide Node:DuplicateFlags:DUPLICATE_GROUPS)
  (define-syntax (Node:DuplicateFlags:DUPLICATE_GROUPS stx) (syntax 2))
  (provide Node:DuplicateFlags:DUPLICATE_SIGNALS)
  (define-syntax (Node:DuplicateFlags:DUPLICATE_SIGNALS stx) (syntax 1))
  (provide Node:InternalMode:INTERNAL_MODE_BACK)
  (define-syntax (Node:InternalMode:INTERNAL_MODE_BACK stx) (syntax 2))
  (provide Node:InternalMode:INTERNAL_MODE_FRONT)
  (define-syntax (Node:InternalMode:INTERNAL_MODE_FRONT stx) (syntax 1))
  (provide Node:InternalMode:INTERNAL_MODE_DISABLED)
  (define-syntax (Node:InternalMode:INTERNAL_MODE_DISABLED stx) (syntax 0)))
(begin
  (provide Object)
  (define Object
    (class godot-object-base
      (super-new)
      (define/public (get-class) (gdobject-invoke (quote get_class)))
      (define/public (is-class class) (gdobject-invoke (quote is_class) class))
      (define/public (set property value) (gdobject-invoke (quote set) property value))
      (define/public (get property) (gdobject-invoke (quote get) property))
      (define/public (set-indexed property_path value)
        (gdobject-invoke (quote set_indexed) property_path value))
      (define/public (get-indexed property_path) (gdobject-invoke (quote get_indexed) property_path))
      (define/public (get-property-list) (gdobject-invoke (quote get_property_list)))
      (define/public (get-method-list) (gdobject-invoke (quote get_method_list)))
      (define/public (property-can-revert property)
        (gdobject-invoke (quote property_can_revert) property))
      (define/public (property-get-revert property)
        (gdobject-invoke (quote property_get_revert) property))
      (define/public (notification what reversed)
        (gdobject-invoke (quote notification) what reversed))
      (define/public (to-string) (gdobject-invoke (quote to_string)))
      (define/public (get-instance-id) (gdobject-invoke (quote get_instance_id)))
      (define/public (set-script script) (gdobject-invoke (quote set_script) script))
      (define/public (get-script) (gdobject-invoke (quote get_script)))
      (define/public (set-meta name value) (gdobject-invoke (quote set_meta) name value))
      (define/public (remove-meta name) (gdobject-invoke (quote remove_meta) name))
      (define/public (get-meta name default) (gdobject-invoke (quote get_meta) name default))
      (define/public (has-meta name) (gdobject-invoke (quote has_meta) name))
      (define/public (get-meta-list) (gdobject-invoke (quote get_meta_list)))
      (define/public (add-user-signal signal arguments)
        (gdobject-invoke (quote add_user_signal) signal arguments))
      (define/public (has-user-signal signal) (gdobject-invoke (quote has_user_signal) signal))
      (define/public (emit-signal signal) (gdobject-invoke (quote emit_signal) signal))
      (define/public (call method) (gdobject-invoke (quote call) method))
      (define/public (call-deferred method) (gdobject-invoke (quote call_deferred) method))
      (define/public (set-deferred property value)
        (gdobject-invoke (quote set_deferred) property value))
      (define/public (callv method arg_array) (gdobject-invoke (quote callv) method arg_array))
      (define/public (has-method method) (gdobject-invoke (quote has_method) method))
      (define/public (has-signal signal) (gdobject-invoke (quote has_signal) signal))
      (define/public (get-signal-list) (gdobject-invoke (quote get_signal_list)))
      (define/public (get-signal-connection-list signal)
        (gdobject-invoke (quote get_signal_connection_list) signal))
      (define/public (get-incoming-connections) (gdobject-invoke (quote get_incoming_connections)))
      (define/public (connect signal callable flags)
        (gdobject-invoke (quote connect) signal callable flags))
      (define/public (disconnect signal callable)
        (gdobject-invoke (quote disconnect) signal callable))
      (define/public (is-connected signal callable)
        (gdobject-invoke (quote is_connected) signal callable))
      (define/public (set-block-signals enable) (gdobject-invoke (quote set_block_signals) enable))
      (define/public (is-blocking-signals) (gdobject-invoke (quote is_blocking_signals)))
      (define/public (notify-property-list-changed)
        (gdobject-invoke (quote notify_property_list_changed)))
      (define/public (set-message-translation enable)
        (gdobject-invoke (quote set_message_translation) enable))
      (define/public (can-translate-messages) (gdobject-invoke (quote can_translate_messages)))
      (define/public (tr message context) (gdobject-invoke (quote tr) message context))
      (define/public (tr-n message plural_message n context)
        (gdobject-invoke (quote tr_n) message plural_message n context))
      (define/public (is-queued-for-deletion) (gdobject-invoke (quote is_queued_for_deletion)))
      (define/public (cancel-free) (gdobject-invoke (quote cancel_free)))))
  (provide Object:ConnectFlags:CONNECT_REFERENCE_COUNTED)
  (define-syntax (Object:ConnectFlags:CONNECT_REFERENCE_COUNTED stx) (syntax 8))
  (provide Object:ConnectFlags:CONNECT_ONE_SHOT)
  (define-syntax (Object:ConnectFlags:CONNECT_ONE_SHOT stx) (syntax 4))
  (provide Object:ConnectFlags:CONNECT_PERSIST)
  (define-syntax (Object:ConnectFlags:CONNECT_PERSIST stx) (syntax 2))
  (provide Object:ConnectFlags:CONNECT_DEFERRED)
  (define-syntax (Object:ConnectFlags:CONNECT_DEFERRED stx) (syntax 1)))
(begin
  (provide RefCounted)
  (define RefCounted
    (class Object
      (super-new)
      (define/public (init-ref) (gdobject-invoke (quote init_ref)))
      (define/public (reference) (gdobject-invoke (quote reference)))
      (define/public (unreference) (gdobject-invoke (quote unreference)))
      (define/public (get-reference-count) (gdobject-invoke (quote get_reference_count))))))